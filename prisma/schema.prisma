// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(CASHIER)
  branchId  String
  branch    Branch   @relation(fields: [branchId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sales     Sale[]
  receipts  Receipt[]

  @@map("users")
}

model Branch {
  id          String   @id @default(cuid())
  name        String   @unique
  address     String
  phone       String
  email       String
  managerId   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  products    Product[]
  sales       Sale[]
  customers   Customer[]
  receipts    Receipt[]

  @@map("branches")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]

  @@map("categories")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String   @unique
  contactPerson String
  phone       String
  email       String
  address     String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]

  @@map("suppliers")
}

model Product {
  id                  String   @id @default(cuid())
  name                String
  description         String?
  categoryId          String
  category            Category @relation(fields: [categoryId], references: [id])
  supplierId          String
  supplier            Supplier @relation(fields: [supplierId], references: [id])
  branchId            String
  branch              Branch   @relation(fields: [branchId], references: [id])
  
  // Pricing
  costPrice           Float
  sellingPrice        Float
  
  // Inventory
  stock               Int      @default(0)
  minStock            Int      @default(10)
  maxStock            Int?
  
  // Product Details
  unitType            String   // tablets, capsules, bottles, vials, etc.
  unitsPerPack        Int      @default(1)
  barcode             String?  @unique
  requiresPrescription Boolean @default(false)
  
  // Status
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  saleItems           SaleItem[]
  stockMovements      StockMovement[]

  @@map("products")
}

model StockMovement {
  id          String            @id @default(cuid())
  productId   String
  product     Product           @relation(fields: [productId], references: [id])
  type        StockMovementType
  quantity    Int
  reason      String?
  reference   String?           // Sale ID, Purchase Order ID, etc.
  createdAt   DateTime          @default(now())
  createdBy   String?

  @@map("stock_movements")
}

model Customer {
  id              String   @id @default(cuid())
  name            String
  phone           String   @unique
  email           String?
  address         String?
  branchId        String
  branch          Branch   @relation(fields: [branchId], references: [id])
  
  // Customer Stats
  totalPurchases  Float    @default(0)
  loyaltyPoints   Int      @default(0)
  isVIP           Boolean  @default(false)
  lastVisit       DateTime?
  
  // Status
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  sales           Sale[]

  @@map("customers")
}

model Sale {
  id              String        @id @default(cuid())
  customerId      String?
  customer        Customer?     @relation(fields: [customerId], references: [id])
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  branchId        String
  branch          Branch        @relation(fields: [branchId], references: [id])
  
  // Sale Details
  subtotal        Float
  taxAmount       Float
  discountAmount  Float         @default(0)
  totalAmount     Float
  
  // Payment
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Status
  status          SaleStatus    @default(COMPLETED)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  items           SaleItem[]
  receipts        Receipt[]

  @@map("sales")
}

model SaleItem {
  id          String  @id @default(cuid())
  saleId      String
  sale        Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  
  // Batch/Expiry info
  batchNumber String?
  expiryDate  DateTime?

  @@map("sale_items")
}

model Receipt {
  id          String   @id @default(cuid())
  saleId      String
  sale        Sale     @relation(fields: [saleId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  branchId    String
  branch      Branch   @relation(fields: [branchId], references: [id])
  
  receiptNumber String @unique
  printedAt    DateTime @default(now())

  @@map("receipts")
}

// Enums
enum UserRole {
  SUPERADMIN
  ADMIN
  MANAGER
  CASHIER
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
  RETURN
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}
